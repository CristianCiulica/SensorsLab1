import std;
import sensor;

bool sensorTimestampComparator(const sensors::SensorData& s1, const sensors::SensorData& s2)
{
	return s1.GetTimestamp() > s2.GetTimestamp();
}

int main()
{
	using sensors::SensorData;
	using sensors::SensorType;
	using sensors::toSensorType;

	/*--------- a ----------*/

	std::vector<SensorData> dataVector;

	for (std::ifstream file{ "../sensors.log" }; !file.eof(); /* EMPTY */)
	{
		if (!file)
		{
			std::cout << "ifstream not in a good state!";
		}

		std::string id_str, type_str, timestamp;
		file >> id_str >> type_str >> timestamp;

		std::size_t nb_values{ type_str == "TEMP" ? 1u : 3u };
		std::vector<float> values(nb_values, 0);
		for (float& value : values)
		{
			file >> value;
		}

		std::string status_str;
		file >> status_str;

		// SensorData sensorData{ std::stoi(id_str.substr(1, 3)), toSensorType(type_str), timestamp, values, status_str == "OK" };
		// dataVector.push_back(sensorData);
		dataVector.emplace_back(std::stoi(id_str.substr(1, 3)), toSensorType(type_str), timestamp, values, status_str == "OK");
	}

	/*--------- b ----------*/

	// range based for C++11
	for (const auto& sensor : dataVector)
	{
		auto month{ sensor.GetMonth() };
		if (sensor.GetType() == SensorType::TEMP && month > 8u && month < 12u)
		{
			std::cout << sensor << '\n';
		}
	}
	std::cout << "\n\n";

	/*--------- c ----------*/

	/*~ std::sort ~*/

	// sort using normal/friend func
	std::sort(dataVector.begin(), dataVector.end(), sensorTimestampComparator);

	// sort using lambda
	//std::sort(
	//	dataVector.begin(), dataVector.end(),
	//	[](const SensorData& s1, const SensorData& s2) {
	//		return s1.GetTimestamp() > s2.GetTimestamp();
	//	}
	//);

	// sort using operator<
	//std::sort(dataVector.begin(), dataVector.end());

	/*~ std::ranges::sort ~*/

	// sort using a projection
	//std::ranges::sort(dataVector, std::ranges::greater(), &SensorData::GetTimestamp);

	// sort using operator< (generated by operator <=> )
	//std::ranges::sort(dataVector);
	//std::ranges::sort(dataVector, {}, &SensorData::GetId);

	for (const auto& sensor : dataVector)
	{
		std::cout << sensor << '\n';
	}
	std::cout << "\n\n";

	return 0;
}
